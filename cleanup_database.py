"""
Script pour nettoyer la base de donn√©es
Supprime les anciennes donn√©es et alertes
"""
import sqlite3
from datetime import datetime, timedelta
import os

def cleanup_database():
    """Nettoie la base de donn√©es"""
    db_path = 'data/fertigation.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üßπ Nettoyage de la base de donn√©es...")
        
        # Compter les donn√©es avant nettoyage
        cursor.execute("SELECT COUNT(*) FROM alerts")
        alerts_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM sensor_readings")
        readings_count = cursor.fetchone()[0]
        
        print(f"üìä Avant nettoyage:")
        print(f"   - Alertes: {alerts_count}")
        print(f"   - Lectures capteurs: {readings_count}")
        
        # Supprimer toutes les alertes
        cursor.execute("DELETE FROM alerts")
        print("‚úÖ Toutes les alertes supprim√©es")
        
        # Garder seulement les donn√©es des 7 derniers jours
        seven_days_ago = datetime.now() - timedelta(days=7)
        cursor.execute("DELETE FROM sensor_readings WHERE timestamp < ?", (seven_days_ago,))
        print("‚úÖ Anciennes donn√©es de capteurs supprim√©es (> 7 jours)")
        
        # Supprimer les anciennes pr√©dictions
        cursor.execute("DELETE FROM predictions WHERE created_at < ?", (seven_days_ago,))
        print("‚úÖ Anciennes pr√©dictions supprim√©es")
        
        # Supprimer les maintenances termin√©es anciennes
        cursor.execute("DELETE FROM maintenance_records WHERE status = 'completed' AND completed_date < ?", (seven_days_ago,))
        print("‚úÖ Anciennes maintenances supprim√©es")
        
        # R√©initialiser les compteurs auto-increment
        cursor.execute("DELETE FROM sqlite_sequence WHERE name IN ('alerts', 'sensor_readings', 'predictions', 'maintenance_records')")
        print("‚úÖ Compteurs r√©initialis√©s")
        
        # Compter apr√®s nettoyage
        cursor.execute("SELECT COUNT(*) FROM alerts")
        alerts_count_after = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM sensor_readings")
        readings_count_after = cursor.fetchone()[0]
        
        print(f"üìä Apr√®s nettoyage:")
        print(f"   - Alertes: {alerts_count_after}")
        print(f"   - Lectures capteurs: {readings_count_after}")
        
        # Optimiser la base de donn√©es
        cursor.execute("VACUUM")
        print("‚úÖ Base de donn√©es optimis√©e")
        
        conn.commit()
        conn.close()
        
        print("üéâ Nettoyage termin√© avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")

if __name__ == '__main__':
    print("üßπ === Nettoyage de la base de donn√©es ===")
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer des donn√©es!")
    print("   - Toutes les alertes")
    print("   - Donn√©es de capteurs > 7 jours")
    print("   - Pr√©dictions > 7 jours")
    print("   - Maintenances termin√©es > 7 jours")
    print()
    
    response = input("Voulez-vous continuer? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        cleanup_database()
    else:
        print("‚ùå Nettoyage annul√©")
